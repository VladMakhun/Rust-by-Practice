1. Make it work

use std::mem::size_of_val;

fn main() {
    let c1 = 'a';
    assert_eq!(size_of_val(&c1), 4); 

    let c2 = 'ä¸­';
    assert_eq!(size_of_val(&c2), 4); 

    println!("Success!");
}

2. Make it work

fn main() {
    let c1 = "ä¸­";
    
    print_char(c1.chars().next().unwrap()); 
}

fn print_char(c: char) {
    println!("{}", c);
}

3. Make println! work


// Make println! work
fn main() {
    let _f: bool = false;

    let t = true;
    if !t {
        println!("Success!");
    } else { 
        println!("Condition was false, so we reach here!");
    }
} 

4. Make it work

fn main() {
    let f = false; 
    let t = true && false; 
    assert_eq!(t, f); 

    println!("Success!");
}

5. Make it work, don't modify `implicitly_ret_unit` !

fn main() {
    let _v: () = (); 

    let v = implicitly_ret_unit();
    assert_eq!(v, ()); 
    println!("Success!");
}

fn implicitly_ret_unit() {
    println!("I will return a ()");
}

6. ðŸŒŸðŸŒŸ What's the size of the unit type?

use std::mem::size_of_val;

fn main() {
    let unit: () = ();
    assert!(size_of_val(&unit) == 0); 

    println!("Success!");
}

