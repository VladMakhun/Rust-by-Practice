1. fn drink(beverage: &str) {
    if beverage == "lemonade" {
        println!("Success!");
        // IMPLEMENT the below code
        return;  // Exit the function if the beverage is lemonade
    }

    println!("Exercise Failed if printing out this line!");
}

fn main() {
    drink("lemonade");  // Pass "lemonade" as an argument

    println!("Exercise Failed if printing out this line!");
}

2. fn main() {
    assert_eq!("abc".as_bytes(), [97, 98, 99]); // Fixed expected values

    let v = vec![1, 2, 3];

    // Safely access the element using `get()` with a check
    match v.get(2) {
        Some(&ele) => println!("Element at index 2: {}", ele), // Safe access
        None => println!("Index out of bounds!"),
    }

    // Calculate production rate per hour without panic
    let production_rate = production_rate_per_hour(2);
    println!("Production rate: {}", production_rate); // Print for verification

    // Safely call divide function with non-zero denominator
    let result = divide(15, 1); // Changed 0 to 1 to avoid panic
    println!("Result of division: {}", result);

    println!("Success!");
}

fn divide(x: u8, y: u8) -> u8 {
    if y == 0 {
        eprintln!("Error: Division by zero! Returning 0 instead.");
        0 // Return 0 or handle the error appropriately
    } else {
        x / y
    }
}

fn production_rate_per_hour(speed: u8) -> f64 {
    let cph: u8 = 221;
    match speed {
        1..=4 => (speed * cph) as f64,
        5..=8 => (speed * cph) as f64 * 0.9,
        9..=10 => (speed * cph) as f64 * 0.77,
        _ => 0.0,
    }
}

pub fn working_items_per_minute(speed: u8) -> u32 {
    (production_rate_per_hour(speed) / 60.0) as u32
}
