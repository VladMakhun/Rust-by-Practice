1. use std::fmt;

struct Point {
    x: i32,
    y: i32,
}

// Implement the fmt method for Display
impl fmt::Display for Point {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "The point is ({}, {})", self.x, self.y)
    }
}

fn main() {
    let origin = Point { x: 0, y: 0 };
    // Fill in the blanks
    assert_eq!(origin.to_string(), "The point is (0, 0)");
    assert_eq!(format!("{}", origin), "The point is (0, 0)");

    println!("Success!");
}

2. ðŸŒŸðŸŒŸðŸŒŸ We can use parse method to convert a String into a i32 number, this is because FromStr is implemented for i32 type in standard library: impl FromStr for i32

// To use `from_str` method, you need to introduce this trait into the current scope.
use std::str::FromStr;

fn main() {
    let parsed: i32 = "5".parse().unwrap(); // Fill in the blank: use `.parse()`
    let turbo_parsed = "10".parse().unwrap(); // Fill in the blank: use `.parse()`
    let from_str = i32::from_str("20").unwrap(); // Fill in the blank: use `i32::from_str()`
    
    let sum = parsed + turbo_parsed + from_str;
    assert_eq!(sum, 35);

    println!("Success!");
}

3. ðŸŒŸðŸŒŸ We can also implement the FromStr trait for our custom types

use std::str::FromStr;
use std::num::ParseIntError;

#[derive(Debug, PartialEq)]
struct Point {
    x: i32,
    y: i32
}

impl FromStr for Point {
    type Err = ParseIntError;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        let coords: Vec<&str> = s.trim_matches(|p| p == '(' || p == ')' )
                                 .split(',')
                                 .map(|x| x.trim())
                                 .collect();

        let x_fromstr = coords[0].parse::<i32>()?;  // Parses the x coordinate
        let y_fromstr = coords[1].parse::<i32>()?;  // Parses the y coordinate

        Ok(Point { x: x_fromstr, y: y_fromstr })  // Returns a Point instance
    }
}

fn main() {
    // FILL in the blanks in two ways
    // DON'T change code anywhere else 
    let p = Point::from_str("(3, 4)");  // First way: using Point::from_str
    // OR 
    // let p = "(3, 4)".parse::<Point>(); // Second way: using .parse()
    
    assert_eq!(p.unwrap(), Point { x: 3, y: 4 });

    println!("Success!");
}

4. 
