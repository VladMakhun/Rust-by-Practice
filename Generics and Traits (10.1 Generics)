1. 
struct A;          // Concrete type `A`.
struct S(A);       // Concrete type `S`.
struct SGen<T>(T); // Generic type `SGen`.

fn reg_fn(_s: S) {}

fn gen_spec_t(_s: SGen<A>) {}

fn gen_spec_i32(_s: SGen<i32>) {}

fn generic<T>(_s: SGen<T>) {}

fn main() {
    // Using the non-generic functions
    reg_fn(S(A));          // Concrete type.
    gen_spec_t(SGen(A));   // Implicitly specified type parameter `A`.
    gen_spec_i32(SGen(42)); // Implicitly specified type parameter `i32`.

    // Explicitly specified type parameter `char` to `generic()`.
    generic::<char>(SGen('a'));

    // Implicitly specified type parameter `char` to `generic()`.
    generic(SGen('b'));

    println!("Success!");
}

2. ðŸŒŸðŸŒŸ A function call with explicitly specified type parameters looks like: fun::<A, B, ...>().

use std::ops::Add;

fn sum<T: Add<Output = T>>(a: T, b: T) -> T {
    a + b
}

fn main() {
    assert_eq!(5, sum(2i8, 3i8));       // Sum of two i8
    assert_eq!(50, sum(20, 30));         // Sum of two i32 (default integer type)
    assert_eq!(2.46, sum(1.23, 1.23));   // Sum of two f64

    println!("Success!");
}

3.
// Define a generic struct Point
struct Point<T> {
    x: T,
    y: T,
}

fn main() {
    let integer = Point { x: 5, y: 10 };      // Point with integer values
    let float = Point { x: 1.0, y: 4.0 };     // Point with floating-point values

    println!("Success!");
}

4. // Modify the struct to have two generic types
struct Point<T, U> {
    x: T,
    y: U,
}

fn main() {
    // Using different types for x and y
    let p = Point { x: 5, y: "hello".to_string() };

    println!("Success!");
}

5. 
// Add generic for Val to make the code work
struct Val<T> {
    val: T,
}

impl<T> Val<T> {
    fn value(&self) -> &T {
        &self.val
    }
}

fn main() {
    let x = Val { val: 3.0 };
    let y = Val { val: "hello".to_string() };
    println!("{}, {}", x.value(), y.value());
}

6. 
struct Point<T, U> {
    x: T,
    y: U,
}

impl<T, U> Point<T, U> {
    // Implement mixup to make it work
    fn mixup<V, W>(self, other: Point<V, W>) -> Point<T, W> {
        Point {
            x: self.x,
            y: other.y,
        }
    }
}

fn main() {
    let p1 = Point { x: 5, y: 10 };
    let p2 = Point { x: "Hello", y: 'ä¸­' };

    let p3 = p1.mixup(p2);

    assert_eq!(p3.x, 5);
    assert_eq!(p3.y, 'ä¸­');

    println!("Success!");
}

7. 
struct Point<T> {
    x: T,
    y: T,
}

impl Point<f32> {
    fn distance_from_origin(&self) -> f32 {
        (self.x.powi(2) + self.y.powi(2)).sqrt()
    }
}

fn main() {
    // Create a Point with f32 values
    let p = Point { x: 5.0, y: 10.0 };
    println!("{}", p.distance_from_origin());
}


