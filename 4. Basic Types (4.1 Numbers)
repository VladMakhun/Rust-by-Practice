1. Remove something to make it work

fn main() {
    let x: i32 = 5;
    let mut y: i32 = 5; 
    y = x;
    let z = 10; 
    println!("Success!");
}

2. Fill the blank

fn main() {
    let v: u16 = 38_u8 as u16;

    println!("Success!");
}

3. ðŸŒŸðŸŒŸðŸŒŸ
fn main() {
    let x = 5;
    assert_eq!("i32".to_string(), type_of(&x)); 

    println!("Success!");
}
fn type_of<T>(_: &T) -> String {
    format!("{}", std::any::type_name::<T>())
}

4.ðŸŒŸðŸŒŸ 
fn main() {
    assert_eq!(i8::MAX, 127); 
    assert_eq!(u8::MAX, 255); 

    println!("Success!");
}

5.ðŸŒŸðŸŒŸ

fn main() {
    let v1 = 251_u16 + 8; 
    let v2 = u8::checked_add(251, 8).unwrap_or(0); 

    println!("{}, {}", v1, v2);
}

6. ðŸŒŸðŸŒŸ

fn main() {
    let v = 1_024 + 0xff + 0o77 + 0b1111_1111;
    assert!(v == 1597); 

    println!("Success!");
}

7. Fill the blank to make it work

fn main() {
    let x = 1_000.000_1; 
    let y: f32 = 0.12; 
    let z = 0.01_f64; 

    assert_eq!(type_of(&x), "f64".to_string()); 
    println!("Success!");
}

fn type_of<T>(_: &T) -> String {
    format!("{}", std::any::type_name::<T>())
}

9. ðŸŒŸðŸŒŸ Two goals: 1. Modify assert! to make it work 2. Make println! output: 97 - 122

fn main() {
    let mut sum = 0;
    for i in -3..2 {
        sum += i;
    }

    assert!(sum == -5); 

    println!("{}", 122 - 97); 

    for c in 'a'..='z' {
        println!("{}", c);
    }
}

10.  Fill the blanks

use std::ops::{Range, RangeInclusive};

fn main() {
    assert_eq!((1..5), Range { start: 1, end: 5 }); // Fill with 5
    assert_eq!((1..=5), RangeInclusive::new(1, 5)); // Fill with =5

    println!("Success!");
}

11. 
fn main() {
    // Integer addition
    assert!(1u32 + 2 == 3); // Fill in with 3

    // Integer subtraction
    assert!(1i32 - 2 == -1); // Fill in with -1
    assert!(1u8 as i8 - 2 == -1); // Casting u8 to i8 to avoid underflow error

    assert!(3 * 50 == 150); // Fill in with 150

    assert!(9.6 / 3.2 == 3.0); // No change needed; this works correctly

    assert!(24 % 5 == 4); // Fill in with 4
    // Short-circuiting boolean logic
    assert!(true && false == false); // Fill in with false
    assert!(true || false == true); // Fill in with true
    assert!(!true == false); // Fill in with false

    // Bitwise operations
    println!("0011 AND 0101 is {:04b}", 0b0011u32 & 0b0101); // Outputs 0011
    println!("0011 OR 0101 is {:04b}", 0b0011u32 | 0b0101); // Outputs 0111
    println!("0011 XOR 0101 is {:04b}", 0b0011u32 ^ 0b0101); // Outputs 0100
    println!("1 << 5 is {}", 1u32 << 5); // Outputs 32
    println!("0x80 >> 2 is 0x{:x}", 0x80u32 >> 2); // Outputs 0x20
}




