1. ðŸŒŸðŸŒŸ Here, both [i32] and str are slice types, but directly using it will cause errors. You have to use the reference of the slice instead: &[i32], &str.

fn main() {
    let arr = [1, 2, 3];
    let s1: &[i32] = &arr[0..2]; // Fix: Use a slice of the array

    let s2: &str = "hello, world"; // Fix: Use &str for string slice

    println!("Success!");
}

2. ðŸŒŸðŸŒŸðŸŒŸ

fn main() {
    let arr: [char; 3] = ['ä¸­', 'å›½', 'äºº'];

    let slice = &arr[..2];
    
    // Modify '8' to make it work
    // Use std::mem::size_of::<[char; 2]>() to get the size of two chars
    assert!(std::mem::size_of_val(&slice) == std::mem::size_of::<[char; 2]>()); // Size of 2 chars: 2 * 4 = 8

    println!("Success!");
}

3. ðŸŒŸðŸŒŸFill the blanks to make the code work

fn main() {
    let arr: [i32; 5] = [1, 2, 3, 4, 5];
    // Fill the blanks to make the code work
    let slice: &[i32] = &arr[1..4]; // Slice from index 1 to 4 (exclusive)
    assert_eq!(slice, &[2, 3, 4]);

    println!("Success!");
}

4. Fill the blank to make the code work, DON'T USE 0..2 again


fn main() {
    let s = String::from("hello");

    let slice1 = &s[0..2];
    // Fill the blank to make the code work, DON'T USE 0..2 again
    let slice2 = &s[..2];

    assert_eq!(slice1, slice2);

    println!("Success!");
}

5. Modify this line to make the code work


fn main() {
    let s = "ä½ å¥½ï¼Œä¸–ç•Œ";
    // Modify this line to make the code work
    let slice = &s[0..3];

    assert!(slice == "ä½ ");

    println!("Success!");
}

6. ðŸŒŸðŸŒŸ &String can be implicitly converted into &str.

fn main() {
    let mut s = String::from("hello world");

    let letter = first_letter(&s);

    s.clear(); // This is now safe since `letter` is owned

    println!("the first letter is: {}", letter);
}

fn first_letter(s: &str) -> String {
    s[..1].to_string() // Convert the first letter to a String
}



