1.ðŸŒŸ A variable can be used only if it has been initialized.
// Fix the error below with least amount of modification to the code
fn main() {
    let x: i32 = 5; // Uninitialized but used, ERROR !
    let y: i32; // Uninitialized but also unused, only a Warning !

    assert_eq!(x, 5);
    println!("Success!");
}

2. ðŸŒŸ Use mut to mark a variable as mutable.

fn main() {
    let mut x: i32 = 1; // Declare x as mutable and set its type to i32
    x += 2; 
    
    assert_eq!(x, 3);
    println!("Success!");
}


3. A scope is the range within the program for which the item is valid.

fn main() {
    let x: i32 = 10;
    {
        let y: i32 = 5;
        println!("The value of x is {} and value of y is {}", x, y);
        println!("The value of x is {} and value of y is {}", x, y); // Move this inside the block
    }
}


4. Fix the error with use define_x

fn main() {
    let x = define_x();  // Call define_x to get the value of x
    println!("{}, world", x); 
}

fn define_x() -> &'static str {  // Return type is a static string slice
    let x = "hello";
    x  // Return x
}


5.You can declare a new variable with the same name as a previous variable, here we can say the first one is shadowed by the second one.

fn main() {
    let x: i32 = 5;
    {
        let x = 12;
        assert_eq!(x, 12); // Inside this block, x is 12
    }

    assert_eq!(x, 5); // Outside the block, x is still 5

    let x = 42;
    println!("{}", x); // Prints "42"
}


6. Remove a line in the code to make it compile

fn main() {
    let mut x: i32 = 1;
    x = 7;
    let x = x; 

    let y = 4;
    let y = "I can also be bound to text!"; 

    println!("Success!");
}

7. Fix the warning below with :
ðŸŒŸ Only one solution

fn main() {
    let x = 1;
    println!("The value of x is: {}", x);
}

ðŸŒŸðŸŒŸ Two distinct solutions

fn main() {
    let _x = 1; // Prefix with an underscore to silence the warning
}

8. ðŸŒŸðŸŒŸ We can use a pattern with let to destructure a tuple to separate variables.

fn main() {
    let (mut x, y) = (1, 2); // Make x mutable
    x += 2;

    assert_eq!(x, 3);
    assert_eq!(y, 2);

    println!("Success!");
}

9. Introduced in Rust 1.59: You can now use tuple, slice, and struct patterns as the left-hand side of an assignment.

fn main() {
    let (x, y);
    (x, ..) = (3, 4);
    [.., y] = [1, 2];
    // Fill the blank to make the code work
    assert_eq!([x, y], [3, 2]);

    println!("Success!");
}


