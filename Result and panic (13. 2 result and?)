1. use std::num::ParseIntError;

fn multiply(n1_str: &str, n2_str: &str) -> Result<i32, ParseIntError> {
    let n1 = n1_str.parse::<i32>()?;
    let n2 = n2_str.parse::<i32>()?;
    Ok(n1 * n2)
}

fn main() {
    let result = multiply("10", "2");
    assert_eq!(result, Ok(20)); // Fixed expected value

    let result = multiply("t", "2");
    assert!(result.is_err()); // Expect an error for invalid input

    println!("Success!");
}

2. 
use std::num::ParseIntError;

// IMPLEMENT multiply with ?
fn multiply(n1_str: &str, n2_str: &str) -> Result<i32, ParseIntError> {
    let n1 = n1_str.parse::<i32>()?; // Parse first string and handle errors
    let n2 = n2_str.parse::<i32>()?; // Parse second string and handle errors
    Ok(n1 * n2) // Return the product wrapped in Ok
}

fn main() {
    assert_eq!(multiply("3", "4").unwrap(), 12); // Unwrap is safe here because we expect valid input
    println!("Success!");
}

3. 
use std::fs::File;
use std::io::{self, Read};

fn read_file1() -> Result<String, io::Error> {
    let f = File::open("hello.txt");
    let mut f = match f {
        Ok(file) => file,
        Err(e) => return Err(e),
    };

    let mut s = String::new();
    match f.read_to_string(&mut s) {
        Ok(_) => Ok(s),
        Err(e) => Err(e),
    }
}

// FILL in the blanks with one code line
// DON'T change any code lines
fn read_file2() -> Result<String, io::Error> {
    let mut s = String::new();

    File::open("hello.txt")?.read_to_string(&mut s)?; // FILL HERE

    Ok(s)
}

fn main() {
    assert_eq!(read_file1().unwrap_err().to_string(), read_file2().unwrap_err().to_string());
    println!("Success!");
}

4. 
use std::num::ParseIntError;

// FILL in the blank in two ways: map, and then
fn add_two(n_str: &str) -> Result<i32, ParseIntError> {
    n_str.parse::<i32>().map(|n| n + 2) // Using map to add 2 to the parsed integer
}

fn main() {
    assert_eq!(add_two("4").unwrap(), 6);

    println!("Success!");
}

5. use std::num::ParseIntError;

// Rewriting `multiply` to make it succinct
fn multiply1(n1_str: &str, n2_str: &str) -> Result<i32, ParseIntError> {
    n1_str.parse::<i32>() // Attempt to parse the first string
        .and_then(|n1| n2_str.parse::<i32>().map(|n2| n1 * n2)) // Parse the second string and multiply
}

fn print(result: Result<i32, ParseIntError>) {
    match result {
        Ok(n)  => println!("n is {}", n),
        Err(e) => println!("Error: {}", e),
    }
}

fn main() {
    // This still presents a reasonable answer.
    let twenty = multiply1("10", "2");
    print(twenty);

    // The following now provides a much more helpful error message.
    let tt = multiply1("t", "2"); // Fix the call to use multiply1
    print(tt);

    println!("Success!");
}

6. use std::num::ParseIntError;

// FILL in the blank
type Res<T> = Result<T, ParseIntError>; // Define a type alias for Result with a specific error type

// Use the above alias to refer to our specific `Result` type.
fn multiply(first_number_str: &str, second_number_str: &str) -> Res<i32> {
    first_number_str.parse::<i32>().and_then(|first_number| {
        second_number_str.parse::<i32>().map(|second_number| first_number * second_number)
    })
}

// Here, the alias again allows us to save some space.
fn print(result: Res<i32>) {
    match result {
        Ok(n)  => println!("n is {}", n),
        Err(e) => println!("Error: {}", e),
    }
}

fn main() {
    print(multiply("10", "2"));
    print(multiply("t", "2"));

    println!("Success!");
}

7. 
