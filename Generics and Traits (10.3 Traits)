1. Fill in the two impl blocks to make the code work.
DON'T modify the code in `main`.

trait Hello {
    fn say_hi(&self) -> String {
        String::from("hi") // Default implementation for say_hi
    }

    fn say_something(&self) -> String; // Requires implementation in each struct
}

struct Student {}

impl Hello for Student {
    fn say_something(&self) -> String {
        String::from("I'm a good student")
    }
}

struct Teacher {}

impl Hello for Teacher {
    // Override the default implementation of `say_hi`
    fn say_hi(&self) -> String {
        String::from("Hi, I'm your new teacher")
    }

    fn say_something(&self) -> String {
        String::from("I'm not a bad teacher")
    }
}

fn main() {
    let s = Student {};
    assert_eq!(s.say_hi(), "hi");
    assert_eq!(s.say_something(), "I'm a good student");

    let t = Teacher {};
    assert_eq!(t.say_hi(), "Hi, I'm your new teacher");
    assert_eq!(t.say_something(), "I'm not a bad teacher");

    println!("Success!");
}


2. The compiler is capable of providing basic implementations for some traits via the #[derive] attribute. For more info, please visit here.


#[derive(PartialEq, PartialOrd)]
struct Centimeters(f64);

#[derive(Debug)]
struct Inches(i32);

impl Inches {
    fn to_centimeters(&self) -> Centimeters {
        let &Inches(inches) = self;
        Centimeters(inches as f64 * 2.54)
    }
}

// Derive the necessary traits for Seconds
#[derive(Debug, PartialEq, PartialOrd)]
struct Seconds(i32);

fn main() {
    let _one_second = Seconds(1);

    println!("One second looks like: {:?}", _one_second);
    let _this_is_true = (_one_second == _one_second);
    let _this_is_false = (_one_second > _one_second);

    let foot = Inches(12);
    println!("One foot equals {:?}", foot);

    let meter = Centimeters(100.0);

    let cmp = if foot.to_centimeters() < meter {
        "smaller"
    } else {
        "bigger"
    };

    println!("One foot is {} than one meter.", cmp);
}


3.  use std::ops::Mul;

fn multiply<T>(a: T, b: T) -> T
where
    T: Mul<Output = T>,
{
    a * b
}

fn main() {
    assert_eq!(6, multiply(2u8, 3u8));
    assert_eq!(5.0, multiply(1.0, 5.0));

    println!("Success!");
}


4. 
use std::ops;

struct Foo;
struct Bar;

#[derive(PartialEq)] // Derive PartialEq for FooBar
struct FooBar;

#[derive(PartialEq)] // Derive PartialEq for BarFoo
struct BarFoo;

// The `std::ops::Add` trait is used to specify the functionality of `+`.
// Here, we make `Add<Bar>` - the trait for addition with a RHS of type `Bar`.
// The following block implements the operation: Foo + Bar = FooBar
impl ops::Add<Bar> for Foo {
    type Output = FooBar;

    fn add(self, _rhs: Bar) -> FooBar {
        FooBar
    }
}

impl ops::Sub<Foo> for Bar {
    type Output = BarFoo;

    fn sub(self, _rhs: Foo) -> BarFoo {
        BarFoo
    }
}

fn main() {
    // DON'T modify the code below.
    // You need to derive some trait for FooBar to make it comparable.
    assert_eq!(Foo + Bar, FooBar);
    assert_eq!(Foo - Bar, BarFoo);

    println!("Success!");
}

5. 
trait Summary {
    fn summarize(&self) -> String;
}

#[derive(Debug)]
struct Post {
    title: String,
    author: String,
    content: String,
}

impl Summary for Post {
    fn summarize(&self) -> String {
        format!("The author of post '{}' is {}", self.title, self.author)
    }
}

#[derive(Debug)]
struct Weibo {
    username: String,
    content: String,
}

impl Summary for Weibo {
    fn summarize(&self) -> String {
        format!("{} published a weibo: {}", self.username, self.content)
    }
}

// Implement `fn summary` below.
fn summary<T: Summary>(item: T) {
    // Call the summarize method on the item and print the result
    println!("{}", item.summarize());
}

fn main() {
    let post = Post {
        title: "Popular Rust".to_string(),
        author: "Sunface".to_string(),
        content: "Rust is awesome!".to_string(),
    };
    let weibo = Weibo {
        username: "sunface".to_string(),
        content: "Weibo seems to be worse than Tweet".to_string(),
    };

    summary(post);
    summary(weibo);

    println!("{:?}", post);
    println!("{:?}", weibo);
}


6. 
struct Sheep {}
struct Cow {}

trait Animal {
    fn noise(&self) -> String;
}

impl Animal for Sheep {
    fn noise(&self) -> String {
        "baaaaah!".to_string()
    }
}

impl Animal for Cow {
    fn noise(&self) -> String {
        "moooooo!".to_string()
    }
}

// Returns a Box<dyn Animal> to handle different return types.
fn random_animal(random_number: f64) -> Box<dyn Animal> {
    if random_number < 0.5 {
        Box::new(Sheep {})
    } else {
        Box::new(Cow {})
    }
}

fn main() {
    let random_number = 0.234;
    let animal = random_animal(random_number);
    println!("You've randomly chosen an animal, and it says {}", animal.noise());
}


7. use std::ops::Add;

// First implementation: Directly using the `Add` trait for the sum
fn sum<T>(x: T, y: T) -> T 
where
    T: Add<Output = T>, // Trait bound for Add
{
    x + y
}

// Second implementation: Using the `Add` trait and associated type
fn sum_with_associated<T>(x: T, y: T) -> T 
where
    T: Add<Output = T>, // Trait bound for Add
{
    x + y
}

fn main() {
    assert_eq!(sum(1, 2), 3); // Integer sum
    assert_eq!(sum(1.5, 2.5), 4.0); // Float sum
    assert_eq!(sum_with_associated(3, 4), 7); // Using the second sum function
    assert_eq!(sum_with_associated(2.5, 3.5), 6.0); // Using the second sum function with floats
}


8. // Define the Pair struct with generic type T
struct Pair<T> {
    x: T,
    y: T,
}

// Implement methods for Pair
impl<T> Pair<T> {
    fn new(x: T, y: T) -> Self {
        Self { x, y }
    }
}

// Implement methods for Pair when T implements Debug and PartialOrd
impl<T: std::fmt::Debug + PartialOrd> Pair<T> {
    fn cmp_display(&self) {
        if self.x >= self.y {
            println!("The largest member is x = {:?}", self.x);
        } else {
            println!("The largest member is y = {:?}", self.y);
        }
    }
}

// Implement Debug and PartialOrd for the Unit struct
#[derive(Debug, PartialOrd, PartialEq)]
struct Unit(i32);

fn main() {
    // Create a Pair of Unit instances
    let pair = Pair {
        x: Unit(1),
        y: Unit(3),
    };

    // Call the cmp_display method
    pair.cmp_display();
}

9. fn example1() {
    // `T: Trait` is the commonly used way.
    // `T: Fn(u32) -> u32` specifies that we can only pass a closure to `T`.
    struct Cacher<T: Fn(u32) -> u32> {
        calculation: T,
        value: Option<u32>,
    }

    impl<T: Fn(u32) -> u32> Cacher<T> {
        fn new(calculation: T) -> Cacher<T> {
            Cacher {
                calculation,
                value: None,
            }
        }

        fn value(&mut self, arg: u32) -> u32 {
            match self.value {
                Some(v) => v,
                None => {
                    let v = (self.calculation)(arg);
                    self.value = Some(v);
                    v
                },
            }
        }
    }

    let mut cacher = Cacher::new(|x| x + 1);
    assert_eq!(cacher.value(10), 11); // The first call with 10 returns 11 (10 + 1)
    assert_eq!(cacher.value(15), 11); // The second call with 15 returns the cached value, which is 11
}

fn example2() {
    // We can also use `where` to construct `T`
    struct Cacher<T>
    where
        T: Fn(u32) -> u32,
    {
        calculation: T,
        value: Option<u32>,
    }

    impl<T> Cacher<T>
    where
        T: Fn(u32) -> u32,
    {
        fn new(calculation: T) -> Cacher<T> {
            Cacher {
                calculation,
                value: None,
            }
        }

        fn value(&mut self, arg: u32) -> u32 {
            match self.value {
                Some(v) => v,
                None => {
                    let v = (self.calculation)(arg);
                    self.value = Some(v);
                    v
                }
            }
        }
    }

    let mut cacher = Cacher::new(|x| x + 1);
    assert_eq!(cacher.value(20), 21); // The first call with 20 returns 21 (20 + 1)
    assert_eq!(cacher.value(25), 21); // The second call with 25 returns the cached value, which is 21
}

fn main() {
    example1();
    example2();

    println!("Success!");
}
