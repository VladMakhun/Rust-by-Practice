1. Fill the blank with proper array type

fn main() {
    // Fill the blank with proper array type
    let arr: [i8; 5] = [1, 2, 3, 4, 5];

    // Modify the code below to make it work
    assert!(arr.len() == 5);

    println!("Success!");
}

2. 

fn main() {
    let arr0 = [1, 2, 3];
    let arr: [_; 3] = ['a', 'b', 'c'];
    
    // Fill the blank
    assert!(std::mem::size_of_val(&arr) == 12); // 3 chars * 4 bytes each = 12 bytes

    println!("Success!");
}

3. ðŸŒŸ All elements in an array can be initialized to the same value at once.


fn main() {
    // Fill the blank
    let list: [i32; 100] = [0;100] ;

    assert!(list[0] == 1);
    assert!(list.len() == 100);

    println!("Success!");
}

4. ðŸŒŸ All elements in an array must be of the same type


fn main() {
    // Fix the error
    let _arr = [1, 2, 3];

    println!("Success!");
}

5. ðŸŒŸ Indexing starts at 0.


fn main() {
    let arr = ['a', 'b', 'c'];
    
    let ele = arr[0]; // Only modify this line to make the code work!

    assert!(ele == 'a');

    println!("Success!");
}

6. ðŸŒŸ Out of bounds indexing causes panic.

fn main() {
    let names = [String::from("Sunfei"), "Sunface".to_string()];

    // `Get` returns an Option<T>, it's safe to use
    let name0 = names.get(0).unwrap();

    // Accessing the second element
    let name1 = &names[1]; // Change the index to 1

    println!("Success! Name0: {}, Name1: {}", name0, name1);
}

