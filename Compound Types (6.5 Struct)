1. ðŸŒŸ We must specify concrete values for each of the fields in struct.

struct Person {
    name: String,
    age: u8,
    hobby: String,
}

fn main() {
    let age = 30;
    let p = Person {
        name: String::from("sunface"),
        age,
        hobby: String::from("coding"), // Provide a value for the hobby field
    };

    println!("Success!");
}

2. ðŸŒŸ Unit struct don't have any fields. It can be useful when you need to implement a trait on some type but donâ€™t have any data that you want to store in the type itself.

struct Unit;

trait SomeTrait {
    // ...Some behaviors defined here.
}

// We don't care about what fields are in the Unit, but we care about its behaviors.
// So we use a struct with no fields and implement some behaviors for it
impl SomeTrait for Unit { }

fn main() {
    let u = Unit;
    do_something_with_unit(u);

    println!("Success!");
}

// Fill the blank to make the code work
fn do_something_with_unit(u: Unit) { } // The parameter type is Unit

3. ðŸŒŸðŸŒŸðŸŒŸ Tuple struct looks similar to tuples, it has added meaning the struct name provides but has no named fields. It's useful when you want to give the whole tuple a name, but don't care about the fields's names.

struct Color(i32, i32, i32);
struct Point(i32, i32, i32);

fn main() {
    let v = Point(0, 127, 255); // Fill in the blanks for the Point
    check_color(Color(v.0, v.1, v.2)); // Create a Color from Point

    println!("Success!");
}   

fn check_color(p: Color) {
    let (x, p.1, p.2) = p;
    assert_eq!(x, 0);
    assert_eq!(p.1, 127);
    assert_eq!(p.2, 255); // Fill in the blank for the third color value
}

4. ðŸŒŸ You can make a whole struct mutable when instantiating it, but Rust doesn't allow us to mark only certain fields as mutable.

struct Person {
    name: String,
    age: u8,
}
fn main() {
    let age = 18;
    let mut p = Person { // Make p mutable
        name: String::from("sunface"),
        age,
    };

    // How can you believe sunface is only 18? 
    p.age = 30;

    // Fill the blank
    p.name = String::from("sunfei"); // Assign new value to name

    println!("Success!");
}

5. ðŸŒŸ Using field init shorthand syntax to reduce repetitions.

struct Person {
    name: String,
    age: u8,
}

fn main() {
    println!("Success!");
} 

fn build_person(name: String, age: u8) -> Person {
    Person {
        age,
        name, // Fill the blank with name
    }
}

6. ðŸŒŸ You can create instance from other instance with struct update syntax


// Fill the blank to make the code work
struct User {
    active: bool,
    username: String,
    email: String,
    sign_in_count: u64,
}
fn main() {
    let u1 = User {
        email: String::from("someone@example.com"),
        username: String::from("sunface"),
        active: true,
        sign_in_count: 1,
    };

    let u2 = set_email(u1);

    println!("Success!");
} 

fn set_email(u: User) -> User {
    User {
        email: String::from("contact@im.dev"),
        username: String::from("sunface"),
        active: true,
        sign_in_count: 1,
    }
}

7. ðŸŒŸðŸŒŸ We can use #[derive(Debug)] to make a struct printable.

#[derive(Debug)] // Fill the blank here
struct Rectangle {
    width: u32,
    height: u32,
}

fn main() {
    let scale = 2;
    let rect1 = Rectangle {
        width: dbg!(30 * scale), // Print debug info to stderr and assign the value of `30 * scale` to `width`
        height: 50,
    };

    dbg!(&rect1); // Print debug info to stderr

    println!("{:?}", rect1); // Print debug info to stdout // Fill the blank here
}

8. ðŸŒŸðŸŒŸ Fix errors to make it work

#[derive(Debug)]
struct File {
    name: String,
    data: String,
}

fn main() {
    let f = File {
        name: String::from("readme.md"),
        data: "Rust By Practice".to_string(),
    };

    let _name = &f.name; // Take a reference to f.name

    // ONLY modify this line
    println!("{}, {}, {:?}", _name, f.data, f); // Use _name instead of f.name
}


