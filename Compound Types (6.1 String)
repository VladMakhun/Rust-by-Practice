1. Fix error

// Fix error without adding new line
fn main() {
    let s: &str = "hello, world";

    println!("Success!");
}

2. 🌟🌟 We can only use str by boxing it, & can be used to convert Box<str> to &str

fn main() {
    let s: Box<str> = "hello, world".into();
    greetings(&s);  
}

fn greetings(s: &str) {
    println!("{}", s);
}

3. Fill the blank

fn main() {
    let mut s = String::new(); // Initialize an empty String
    s.push_str("hello, world");
    s.push('!');

    assert_eq!(s, "hello, world!");

    println!("Success!");
}

4. 🌟🌟🌟 Fix all errors without adding newline

fn main() {
    let mut s = String::from("hello"); // make 's' mutable
    s.push(','); 
    s.push_str(" world"); // use push_str for string slice
    s += "!"; // += works with &str

    println!("{}", s);
}

5. 🌟🌟 replace can be used to replace substring

fn main() {
    let s = String::from("I like dogs");
    // Allocate new memory and store the modified string there
    let s1 = s.replace("dogs", "cats");

    assert_eq!(s1, "I like cats");

    println!("Success!");
}

6. 🌟🌟 You can only concat a String with &str, and String's ownership can be moved to another variable.


// Fix errors without removing any line
fn main() {
    let s1 = String::from("hello,");
    let s2 = String::from("world!");
    let s3 = s1 + &s2; 
    assert_eq!(s3, "hello,world!");
    println!("{}", s3);
}

7. 🌟🌟 &str can be converted to String in two ways

// Fix error with at least two solutions
fn main() {
    let s = String::from ("hello, world");
    greetings(s)
}

fn greetings(s: String) {
    println!("{}", s)
}

8. 🌟🌟 We can use String::from or to_string to convert a &str to String

fn main() {
    let s = "hello, world".to_string();
    let s1: &str = &s; // Take a reference to the String

    println!("Success!");
}

9. You can use escapes to write bytes by their hexadecimal values
  Fill the blank below to show "I'm writing Rust"

fn main() {
    // You can use escapes to write bytes by their hexadecimal values
    // Fill the blank below to show "I'm writing Rust"
    let byte_escape = "I'm writing Ru\x73t!"; // '\x73' is 's', and 't' completes "Rust"
    println!("What are you doing\x3F (\\x3F means ?) {}", byte_escape);

    // ...Or Unicode code points.
    let unicode_codepoint = "\u{211D}";
    let character_name = "\"DOUBLE-STRUCK CAPITAL R\"";

    println!("Unicode character {} (U+211D) is called {}",
                unicode_codepoint, character_name );

    let long_string = "String literals
                        can span multiple lines.
                        The linebreak and indentation here \
                         can be escaped too!";
    println!("{}", long_string);
}

10. 🌟🌟🌟 Sometimes there are just too many characters that need to be escaped or it's just much more convenient to write a string out as-is. This is where raw string literals come into play.

fn main() {
    let raw_str = "Escapes don't work here: ? ℝ"; // Directly use the symbols in the string
    assert_eq!(raw_str, "Escapes don't work here: ? ℝ");

    // If you need quotes in a raw string, add a pair of #s
    let quotes = r#"And then I said: "There is no escape!""#;
    println!("{}", quotes);

    // If you need "# in your string, just use more #s in the delimiter.
    // You can use up to 65535 #s.
    let delimiter = r###"A string with "# in it. And even "##!"###;
    println!("{}", delimiter);

    // Fill the blank
    let long_delimiter = r###"Hello, "##""###; // Use 3 #s to include "##" in the string
    assert_eq!(long_delimiter, "Hello, \"##\"");

    println!("Success!");
}

11. 🌟🌟🌟 You can't use index to access a char in a string, but you can use slice &s1[start..end].

fn main() {
    let s1 = String::from("hi,中国");
    
    let h = &s1[0..1]; // Take a slice for the first byte
    assert_eq!(h, "h");

    let h1 = &s1[3..6]; // Correctly slice the 3 bytes for "中"
    assert_eq!(h1, "中");

    println!("Success!");
}

12. Fill the blank to print each char in "你好，世界"


fn main() {
    // Fill the blank to print each char in "你好，世界"
    for c in "你好，世界".chars() {
        println!("{}", c)
    }
}


