1. Use as many approaches as you can to make it work

fn main() {
    let x = String::from("Hello world");
    let y = x.clone(); 
    println!("{}, {}", x, y); 
}

2. Don't modify code in main!

fn main() {
    let s1 = String::from("Hello world");
    let s2 = take_ownership(s1);

    println!("{}", s2);
}

// Only modify the code below!
fn take_ownership(s: String) -> String { 
    println!("{}", s);
    s 
}

3. Only modify the code below!

fn main() {
    let s = give_ownership();
    println!("{}", s);
}

fn give_ownership() -> String {
    let s = String::from("Hello world");
    s 
}

4. // Fix the error without removing any code

fn main() {
    let s = String::from("Hello World");

    print_str(&s); // Pass a reference to s

    println!("{}", s);
}

fn print_str(s: &String) { // Take a reference to String
    println!("{}", s)
}

5. Don't use clone ,use copy instead

fn main() {
    let s = String::from("Hello World");

    print_str(&s); // Pass a reference to s

    println!("{}", s);
}

fn print_str(s: &String) { // Take a reference to String
    println!("{}", s)
}

6. Mutability can be changed when ownership is transferred.

fn main() {
    let s = String::from("Hello ");
    
    let mut s1 = s; // Make s1 mutable

    s1.push_str("World!"); // Now we can modify s1

    println!("Success!");
}

7. 

fn main() {
    let x = Box::new(5);
    
    let y = &*x; // This creates an immutable reference
    
    // *y = 4; // This would cause an error since y is immutable

    assert_eq!(*x, 5); // This assertion will pass

    println!("Success!");
}


8.  Modify this line only, don't use `_s`

fn main() {
    let t = (String::from("hello"), String::from("world"));

    let _s = t.0;

    // Modify this line only, don't use `_s`
    println!("{:?}", (&t.0, &t.1)); // Use references to the remaining elements
}

9. Fill the blanks

fn main() {
    let t = (String::from("hello"), String::from("world"));

    // Fill the blanks
    let (s1, s2) = t.clone(); // Use clone() to get owned values
    let _t = t; // Retain the original tuple

    println!("{:?}, {:?}, {:?}", s1, s2, _t); // -> "hello", "world", ("hello", "world")
}



